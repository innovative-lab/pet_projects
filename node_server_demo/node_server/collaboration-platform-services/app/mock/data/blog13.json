{
  "blog_id": "blog_mock_13",
  "title": "Introduction to Gradle",
  "author": null,
  "content": "<p><span style=\"color: #008000; font-size: 14pt;\"><strong>About the Blog</strong></span> This blog is mainly intended for the people who are new to Gradle. This blog defines the  basic concepts of the Gradle. After reading this blog you should be able to understand basic concepts of gradle and build a java application using Gradle. <span style=\"color: #008000; font-size: 14pt;\"><strong>Introduction to Build Tools</strong></span> Before discussing about Gradle, I would like to give brief introduction about build tools and its necessity. As a developer every day we have to write the code, follow best practices, compile the source code, test the code, and deal with jars required for the code and that jars version might change (dependency management). We may have to invoke each one of these manually if we don’t have build tools. I guess you got the need of build tools. Not just for development but in the real world production environment there will be many complex projects, which will have inter dependencies which cannot be invoked manually all the steps. So Basically Build tools are mainly used for automating build of the code you wrote , which can manage dependencies ,compile the code ,execute test cases you wrote etc.., at a go. In order to handle all these activities we have build tools like Ant, Maven and Gradle for java applications. <span style=\"color: #008000; font-size: 14pt;\"><strong>Gradle Introduction</strong></span> Gradle build tool uses Domain Specific language which is based on the groovy programming language instead of the xml, which is declarative in nature and highly customizable with many built-in plugins. Unlike maven and Ant, configuration in the Gradle is fairly simple. Also Gradle combines the features of the both maven and Ant and mostly based on convention over configuration. Gradle supports Java, c/c++, Scala and android development. <span style=\"color: #008000; font-size: 14pt;\"><strong>Installation</strong></span> <span style=\"text-decoration: underline;\">Prerequisites:</span></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    Java JDK or JRE (1.6 and above). Set JAVA_HOME/bin to path variable.\n  </li>\n</ul>\n\n<p><span style=\"text-decoration: underline;\">Download and Extract:</span> \n*   You can download the Gradle from <a href=\"http://gradle.org/gradle-download/\">http://gradle.org/gradle-download/</a>  and extract it.\n*   Set the GRADLE_HOME/bin to the path</p>\n\n<p><span style=\"text-decoration: underline;\">Check the installation:</span></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    Execute the following command to check the gradle version\n  </li>\n  <li>\n    gradle --version or gradle -v\n  </li>\n</ul>\n\n<p><span style=\"color: #008000; font-size: 14pt;\"><strong>Gradle Build File </strong></span> In gradle each build consists of projects and each project consists of tasks. Task is a piece of work in the build process of a project such as the compiling code, execute test cases ,generating jar etc.., as I mentioned earlier gradle is based on groovy programming language we can use groovy code wherever required and can use both imperative and declarative statements. The following is a very simple build file. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/first.png\"><img class=\"alignnone size-full wp-image-5390\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/first.png\" alt=\"first\" width=\"828\" height=\"77\" /></a> <span style=\"font-family: 'Constantia',serif; mso-no-proof: yes;\">You</span><span style=\"font-family: 'Constantia',serif;\"> can execute this by executing the command as follows. By default it looks for build.gradle in current directory</span> <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled1.png\"><img class=\"alignnone size-full wp-image-5394\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled1.png\" alt=\"Untitled\" width=\"828\" height=\"44\" /></a> You can use the customized name for build script. For example if we name it build_one.gradle. We have to mention the full name while executing the build as follows. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled2.png\"><img class=\"alignnone size-full wp-image-5395\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled2.png\" alt=\"Untitled\" width=\"829\" height=\"42\" /></a> <span style=\"color: #008000; font-size: 14pt;\"><strong>Gradle plugins</strong></span> Plugins in the gradle extends the core functionality of the gradle, which adds some pre-configured tasks. We can also write the custom plugins. For example adding the java plugin adds the tasks such as compileJava, execute test cases and create a jar file. Some of the already existing plugins are java, jar, war, jetty, Find bugs and eclipse etc.., Declaring is very simple as follows <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled3.png\"><img class=\"alignnone size-full wp-image-5396\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled3.png\" alt=\"Untitled\" width=\"828\" height=\"79\" /></a> <span style=\"color: #008000; font-size: 14pt;\"><strong>Dependency Management for the Java applications</strong></span> Gradle supports automatic download of the java libraries. Java library is identified by the groupId: artifactId:version  and Also gradle download transitive dependencies as well. There are different types of the dependency configurations <strong>compile</strong>: dependencies required to compile source of the project <strong>runtime</strong>: The dependencies required at run time **testCompile: **The dependencies required to compile the test source of the project **testRuntime: **The dependencies required to run the tests In order to get the dependencies built into project, you simply have to mention the same in the build.gradle file. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled4.png\"><img class=\"alignnone size-full wp-image-5398\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled4.png\" alt=\"Untitled\" width=\"828\" height=\"133\" /></a> <span style=\"color: #008000; font-size: 14pt;\"><strong>Repositories</strong></span> Gradle supports multiple repository formats such as Maven, Ivy and many other ways to access the repository. Gradle doesn’t define the default repository, so one needs to mention atleast one repository in the build.gradle. Usage of the maven repository is as follows <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled5.png\"><img class=\"alignnone size-full wp-image-5399\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled5.png\" alt=\"Untitled\" width=\"828\" height=\"118\" /></a> You can mention the url of the mavenCentral as well instead of mavenCentral() as follows <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled6.png\"><img class=\"alignnone size-full wp-image-5400\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled6.png\" alt=\"Untitled\" width=\"828\" height=\"127\" /></a> To mention the remote repository you have to mention the full URL as follows<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled7.png\"><img class=\"alignnone size-full wp-image-5401\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled7.png\" alt=\"Untitled\" width=\"828\" height=\"118\" /></a>   <span style=\"color: #008000; font-size: 14pt;\"><strong>Creating a new java gradle project and running build</strong></span> In order to create new java gradle project, we can execute the following command to generate the java project. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled8.png\"><img class=\"alignnone size-full wp-image-5403\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled8.png\" alt=\"Untitled\" width=\"828\" height=\"35\" /></a> Or New project can be created in eclipse using gradle Integration plugin for eclipse.Folder structure looks like following. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled9.png\"><img class=\"alignnone size-full wp-image-5404\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled9.png\" alt=\"Untitled\" width=\"572\" height=\"190\" /></a>   Sample build.gradle for basic java application is as follows <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled10.png\"><img class=\"alignnone size-full wp-image-5406\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled10.png\" alt=\"Untitled\" width=\"828\" height=\"410\" /></a> Now you can start the  Gradle build via the command line. On executing the command gradle build gradle looks for a file called build.gradle in the current directory and downloads the required dependencies and performs the various tasks and generates the jar in the build folder. To define a different build file the -b buildFileName option can be used. We can see the tasks that have been executed while building the jar. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled11.png\"><img class=\"alignnone size-full wp-image-5407\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Untitled11.png\" alt=\"Untitled\" width=\"365\" height=\"174\" /></a>   <span style=\"color: black; font-size: 12pt;\">Watch out this space to know about exciting features of Gradle such as  continuous build , multi project build and many other features.</span></p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["gradle", "build", "java"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.321Z"
}