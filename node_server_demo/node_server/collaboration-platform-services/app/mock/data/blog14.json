{
  "blog_id": "blog_mock_14",
  "title": "Save Your Application – Prevention is better than cure  !!!",
  "author": null,
  "content": "<p>  <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\"> <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/Picture1.jpg\"><img class=\"alignnone size-full wp-image-5122\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/Picture1.jpg\" alt=\"Picture1\" width=\"824\" height=\"502\" /></a>                                                         </span></span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\">Dr. Hystrix</span>: Hey are you an engineer ?</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #339966;\">Mr. Engineer</span>: Yes I am.</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\">Dr. Hystrix</span>: Made an application ?</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #339966;\">Mr. Engineer</span> :Yes I have.</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\">Dr. Hystrix</span>: Are you sure it will never fail ?</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #339966;\">Mr. Engineer</span>: Hmm Yes.</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\">Dr. Hystrix</span>:  Even if the DB connection fails ?</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #339966;\">Mr. Engineer</span>: Oh no, that’s not my applications problem.</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #ff0000;\">Dr. Hystrix</span>: But your application will fail if Db connection fails ?</span></strong> <strong><span style=\"font-family: 'comic sans ms', sans-serif;\"><span style=\"color: #339966;\">Mr. Engineer</span>: Yes</span></strong> Is this is an inevitable situation ? No its not. You needn’t put your applications life at risk because any of the  external dependencies that your application was using failed. Here is the solution –<span style=\"font-size: 18pt;\"> <strong>Hystrix.</strong></span> Hystrix is a library that is designed to control the interactions between the application and these distributed services providing high fault tolerance and a greater latency.Hystrix achieves this by: Isolating point of access between these applications and the services ,Monitoring them and preventing cascading failures and providing fallback options. The design principles followed by Hystrix are: 1.Fail Fast :  It means to shed the load fast instead of putting that in queue. 2.Fallback :Provide fallback where ever it is feasible to prevent failure. 3.Isolation techniques : like circuit breakers are used to handle failure from any one dependency. 4.Optimize for time-to-discovery through near real-time metrics, monitoring and alerting. 5.Optimize for time-to-recovery with low latency propagation of configuration changes and support for dynamic property changes in virtually all aspects of Hystrix to allow real-time operational modifications with low latency feedback loops. 6.Protect against entire dependency client execution, not just network traffic.   Fig 1: Flow of hystrix <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/Picture11.png\"><img class=\"alignnone size-full wp-image-5115\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/Picture11.png\" alt=\"Picture1\" width=\"1463\" height=\"510\" /></a>   How It Works: Flow of a Hystrix integrated application can be explained as: \n*   Call to the dependency resource is wrapped in a Hystrix command class.\n*   Hystrix command class .execute method is invoked which internally verifies two conditions: Whether circuit breaker is open and whether thread pool is full.</p>\n\n<ul>\n<li>If the circuit is short circuited or the thread pool is full and the request gets rejected then the request goes to getfallback() where the alternate flow is present.</li>\n<li>If the circuit breaker is not open or the thread pool is not full then the run method is invoked where we have the primary flow written.</li>\n<li>If in the run method the request gets timed out or any exception is thrown then getfallback() method will be invoked.</li>\n<li>If it has successfully executed run then the success message is returned back to the client.</li>\n<li>Because of any of the exceptions that occurred previously and if the getfallback() was called then for the successful execution of the fallback , fallbacks successful message is returned and for any unimplemented or exception cases that occurred in the fallback a failure message is returned to the command.   Now since we have a solution for saving our application life no need to worry anymore. Have a happy coding life.</li>\n</ul>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["hystrix"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.337Z"
}