{
  "blog_id": "blog_mock_17",
  "title": "Graph Databases - An Introduction",
  "author": null,
  "content": "<h1>Graph databases</h1>\n\n<p>This blog is intended to be an introduction to graph databases. It aims to show you a different way of storing data than the usual RDBMS way.</p>\n\n<h2>Pitfalls of the relational model</h2>\n\n<p>We are all familiar with the relational model for storing data. It’s the first thing we learn when we talk about databases. But we need to question this traditional way. The building blocks of the RDBMS world are tables. Tables contain rows and columns. The structure of the table (schema) is very rigid. Each table is like a blueprint. Each row of a table is like the instance of this blueprint. Each row’s identity is established using primary keys. The issue is seen when we need to form a relationship between 2 tables. The relational model’s answer to this is to have the primary key of one table as a foreign key in the other table. Let’s describe this with an example.</p>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img1.png\"><img class=\"alignnone size-full wp-image-5177\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img1.png\" alt=\"graphdb-img1\" width=\"728\" height=\"267\" /></a> In the above example, we are trying to represent that a person has read many books, and that a book may be read by many people. To achieve this, we need to create an intermediate table which holds this info for us. Also notice that the ‘person_id’ and ‘book_id’ are foreign keys. We are now used to model data in this fashion, but this is anything but natural. This is just the way to represent this solution in an RDBMS scenario. This example looks simple enough right now, but it will quickly increase in complexity once we have 10 or 20 such relationships. When we try to query this data, the complexity increases further. We will need to join these tables while join operations are very costly in RDBMS. So let’s now get into the main topic at hand, Graphs.</p>\n\n<h2>What is a graph?</h2>\n\n<p>We have all studied graphs as part of mathematics, as a part of graph theory. So let’s quickly define it. Simply put, a graph is comprised of a set of vertices and edges. Each edge connects 2 vertices.</p>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img2.png\"><img class=\"alignnone size-full wp-image-5178\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img2.png\" alt=\"graphdb-img2\" width=\"330\" height=\"216\" /></a> But we were looking to replace the relational model with this. It’s too simple to model data at this level. So let’s focus on a more enriched form of the graph.</p>\n\n<h2>Property graph model</h2>\n\n<p>A property graph is made up of vertices, edges and properties. A property can be used to describe either a vertex or an edge. In a property graph, vertices represent entities, edges represent relationships and properties are used to further describe vertices and edges. Let us represent the person-book scenario using a property graph.</p>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img3.png\"><img class=\"alignnone size-full wp-image-5179\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img3.png\" alt=\"graphdb-img3\" width=\"707\" height=\"381\" /></a> This property graph is intuitive and easy to understand compared to the relational model. We can easily infer that ‘Mark’ and ‘Bob’ have both read ‘Effective Java’. Notice the use of properties to describe a person and a book. It is also possible to further describe the HAS_READ edge, for instance, if we want to know how much time Mark took to read the book.</p>\n\n<h2>Example graphs</h2>\n\n<p>Here are a few example graphs.</p>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img4.png\"><img class=\"alignnone size-full wp-image-5180\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img4.png\" alt=\"graphdb-img4\" width=\"776\" height=\"467\" /></a> <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img5.png\"><img class=\"alignnone size-full wp-image-5181\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/graphdb-img5.png\" alt=\"graphdb-img5\" width=\"922\" height=\"525\" /></a></p>\n\n<h2>Graph databases</h2>\n\n<p>There are many graph DB implementations out there. Here are a few well known ones,</p>\n\n<ul>\n<li><a href=\"http://neo4j.com/\">Neo4J</a></li>\n<li><a href=\"http://orientdb.com/\">OrientDB</a></li>\n<li><a href=\"http://thinkaurelius.github.io/titan/\">Titan</a></li>\n<li><p><a href=\"http://franz.com/agraph/allegrograph/\">AllegroGraph</a> To use these databases from our application we would need one of the following,</p></li>\n<li><p><a href=\"http://projects.spring.io/spring-data-neo4j/\">Spring data for Neo4J</a></p></li>\n<li><p><a href=\"http://tinkerpop.incubator.apache.org/\">Tinkerpop</a>   This has been a quick introduction to graph databases. Kindly comment about your thoughts on this topic.</p></li>\n</ul>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["graph", "nosql", "database"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.337Z"
}