{
  "blog_id": "blog_mock_6",
  "title": "REST Services with Vert.x 3.0",
  "author": null,
  "content": "<p><span style=\"font-size: 18pt; color: #48afdb;\">Use Case</span> The Use case chosen is a simple one which everyone can relate to. It is an E-commerce platform providing services to, \n*   Add a product category (Eg: electronics, clothing etc.)\n*   Add product(s) under a category (Eg: Nokia 1100, Levis jeans pant etc.)\n*   Get all the products from a category\n*   Delete a product from inventory  </p>\n\n<p><span style=\"font-size: 18pt; color: #48afdb;\">Libraries used</span> \n*   Vert.x web for HTTP request routing and handling\n*   Vert.x core libraries for operations on event bus, logging and environment setting.\n*   Vert.x unit for unit testing\n*   HSQL in-memory database\n*   Spring-jdbc for running DDL and DML scripts  </p>\n\n<p><span style=\"font-size: 18pt; color: #48afdb;\">Application Design</span></p>\n\n<h1><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/vertx-ecom-rest.png\"><img class=\"alignnone size-full wp-image-5262\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/vertx-ecom-rest.png\" alt=\"vertx-ecom-rest\" width=\"891\" height=\"518\" /></a>  </h1>\n\n<p><strong><span style=\"font-size: 14pt;\">AppVerticle.java</span></strong> – This class is the starting point of the application responsible for deploying all the Verticles in the application.</p>\n\n<p style=\"text-align: left;\">\n  <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/AppVerticle.jpg\"><img class=\"alignnone size-full wp-image-5256\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/AppVerticle.jpg\" alt=\"AppVerticle\" width=\"691\" height=\"181\" /></a>\n</p>\n\n<p> </p>\n\n<p><strong><span style=\"font-size: 14pt;\">DBUtil.java</span></strong> - This Verticle is responsible for creating the tables and populating some initial data in the HSQL in-memory database. The DDL and DML scripts are read from a file and are executed. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/DBUtilVerticle.jpg\"><img class=\"alignnone size-full wp-image-5257\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/DBUtilVerticle.jpg\" alt=\"DBUtilVerticle\" width=\"629\" height=\"363\" /></a>   <strong><span style=\"font-size: 14pt;\">HttpServerVerticle.java</span></strong> – This class is responsible for spawning the web server. This class in turn creates the controller object which exposes the REST endpoints. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/HttpServerVerticle.jpg\"><img class=\"alignnone size-full wp-image-5258\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/HttpServerVerticle.jpg\" alt=\"HttpServerVerticle\" width=\"592\" height=\"425\" /></a>   <span style=\"font-size: 14pt;\"><strong>ProductController.java</strong></span> – This class exposes all the REST endpoints of the application. Each end point is assigned a handler which will be called whenever a matching request arrives. This controller in turn calls the service layer method. As there is a database operation involved which is a blocking operation, the call is wrapped in an <strong>executeBlocking()</strong> section which will make sure the task is executed outside the event loop which will not block the event loop from listening to new incoming events. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductController.jpg\"><img class=\"alignnone size-full wp-image-5259\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductController.jpg\" alt=\"ProductController\" width=\"711\" height=\"542\" /></a>   <strong><span style=\"font-size: 14pt;\">ProductService.java</span> **– This class is the service layer for the application. This layer forwards the request from the controller onto the event-bus. The request on the event-bus will be read by another Verticle which will interact with the database and give the results back on the event-bus. The response handlers are mentioned in the service layer. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductService.jpg\"><img class=\"alignnone size-full wp-image-5261\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductService.jpg\" alt=\"ProductService\" width=\"778\" height=\"316\" /></a>   <span style=\"font-size: 14pt;\"><strong>ProductDAO.java</strong></span> – This Verticle is deployed as a **worker</strong> as it deals with database and a lot of blocking I/O operations which is not desired. So this Verticle is run outside of the event-loop by a worker thread from the Vert.x thread pool. It opens up a connection with database and registers itself as a consumer on event-bus to incoming requests from the service layer. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductDAOVerticle.jpg\"><img class=\"alignnone size-full wp-image-5260\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/08/ProductDAOVerticle.jpg\" alt=\"ProductDAOVerticle\" width=\"833\" height=\"583\" /></a>   The Unit tests can be found in path <strong>test/main/java</strong>.</p>\n\n<h1> </h1>\n\n<p><span style=\"font-size: 18pt; color: #48afdb;\">Running the application</span></p>\n\n<ul style=\"list-style-type: square;\">\n  <li>\n    Import the project from <a title=\"Link to reference implementation\" href=\"https://svn.mindtree.com/OPCOERefApps/trunk/code/Vertx/code/vertx-ecommerce-rest/\">SVN</a> or Download it from MRALD (search for \"<em>vertx rest\"</em>).\n  </li>\n  <li>\n    Make sure the java version is 1.8\n  </li>\n  <li>\n    Build the maven project using command\n  </li>\n</ul>\n\n<p><strong>            <span style=\"font-family: 'courier new', courier;\">  cmd> </span> <span style=\"font-family: 'courier new', courier;\">mvn clean install</span></strong> \n*   Run the fat-jar using command</p>\n\n<p><strong>                 <span style=\"font-family: 'courier new', courier;\">cmd> java –jar vertx-ecommerce-rest-0.0.1-SNAPSHOT-fat.jar </span></strong>   <span style=\"font-size: 18pt; color: #48afdb;\">Accessing the REST services</span> <strong><em>1&#46; Add a product category</em></strong> <strong>POST</strong> <span style=\"text-decoration: underline;\"><span style=\"color: #3366ff; text-decoration: underline;\">http://localhost:8080/categories</span></span> { \"id\":3, \"name\":\"Sports Accessories\", \"description\":\"All the goods related to sports\" } <strong><em>2&#46; Add a product in a category</em></strong> <strong>POST</strong> <span style=\"text-decoration: underline;\"><span style=\"color: #3366ff;\"><a href=\"http://localhost:8080/categories/1/products\"><span style=\"color: #3366ff; text-decoration: underline;\">http://localhost:8080/categories/1/products</span></a></span></span> { \"id\" : 5, \"name\" : \"Nokia Lumia 625\", \"description\" : \"Windows smart phone\", \"price\" : 16000.00 } <strong><em>3&#46; Get all the products from a category</em></strong> <strong>GET</strong> <span style=\"text-decoration: underline;\"><span style=\"color: #3366ff;\"><a href=\"http://localhost:8080/categories/1\"><span style=\"color: #3366ff; text-decoration: underline;\">http://localhost:8080/categories/1</span></a></span></span> <strong><em>4&#46; Deleting a product</em></strong> <strong>DELETE</strong> <span style=\"text-decoration: underline;\"><span style=\"color: #3366ff; text-decoration: underline;\">http://localhost:8080/categories/1/products/5</span></span>    </p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["vertx", "polyglot", "rest"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.306Z"
}