{
  "blog_id": "blog_mock_16",
  "title": "Load balancing Web socket - What do you think?",
  "author": null,
  "content": "<p style=\"text-align: justify;\">\n  We all know and would certainly have done the load balancing for http/https services. The most common algorithm used is Round Robin(RR). It works pretty well. Any application deployed in any JEE container can be fronted and load balanced by any http server like Apache or Nginx. This works exactly as expected. Let's now talk about the web sockets.\n</p>\n\n<p style=\"text-align: justify;\">\n  Consider a simple chat application developed using web sockets. Here is the image to explain it:\n</p>\n\n<p style=\"text-align: justify;\">\n  <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/IMG_20150518_133520232.jpg\"><img class=\"alignnone  wp-image-5188\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/IMG_20150518_133520232-300x168.jpg\" alt=\"IMG_20150518_133520232\" width=\"479\" height=\"268\" /></a>\n</p>\n\n<p style=\"text-align: justify;\">\n  This explains that 4 users are connecting to the web socket deployed on Tomcat. When they send a message it goes to the server and server further pushes it back to WHOM SO EVER is connected. Here WHOM SO EVER = 4 users. Hence the message goes to all 4 users. This makes perfect sense in terms of a chat application. Now assume the chat application became extra famous and super hit (though it has only one public room). Let's not go in functional excellence of the chat application and discuss on the scalability issue. As the load is increasing we can't make everything run on one Tomcat. We need to increase the number of Tomcat nodes and as we increase the nodes, we also need to take care of the load balancing. To do that lets add a web server to do the load balancing for this web socket. So I am adding a NginX server and below is the load balancing configuration added:\n</p>\n\n<p style=\"text-align: justify;\">\n  map $http_upgrade $connection_upgrade { default upgrade; '' close; }\n</p>\n\n<p style=\"text-align: justify;\">\n  upstream websocket { server 172.22.XX.XX:8090; server 172.22.YY.YY:8081; }\n</p>\n\n<p style=\"text-align: justify;\">\n  server { listen 80;\n</p>\n\n<p style=\"text-align: justify;\">\n  access_log /var/log/nginx/80.access.log main;\n</p>\n\n<p style=\"text-align: justify;\">\n  location / { proxy_pass http://websocket; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } }\n</p>\n\n<p style=\"text-align: justify;\">\n  As default, the load balancing policy is RR. Now lets see how the connections are made in the new system:\n</p>\n\n<p style=\"text-align: justify;\">\n  <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/IMG_20150515_123652912_HDR.jpg\"><img class=\"alignnone  wp-image-5187\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/05/IMG_20150515_123652912_HDR-300x168.jpg\" alt=\"WS Loadbanalcing issue\" width=\"555\" height=\"311\" /></a>\n</p>\n\n<p style=\"text-align: justify;\">\n  Let's re-think on what happened. When, Abhideep sends a message, it reached the Tomcat and Tomcat pushes the message back to WHO SO EVER is connected to it i.e. Abhideep and Nitish. Oh!!!! It means Tejas and Bhushan dint get the message sent by Abhideep. It means now only Abhideep and Nitish can talk to each other and similarly Tejas and Bhushan can talk to each other.\n</p>\n\n<p style=\"text-align: justify;\">\n  I was planning to scale. But what is this ?? It broke my functionality !!!! Now what should I do ?\n</p>\n\n<ol style=\"text-align: justify;\">\n  <li>\n    Should I try session replication on the Tomcats ?\n  </li>\n  <li>\n    Should I scale up instead of scale out ?\n  </li>\n  <li>\n    Should I try some other implementation of Web socket, like NodeJS ?\n  </li>\n  <li>\n    Should I use some better load balancer ?\n  </li>\n</ol>\n\n<p style=\"text-align: justify;\">\n  Share your opinion and keep watching this space for further information.\n</p>\n\n<p style=\"text-align: justify;\">\n  Reference Implementation: A chat application can be found <a href=\"https://social.mindtree.com/communities/J2EE/_layouts/15/start.aspx#/Documents/Forms/AllItems.aspx?RootFolder=%2fcommunities%2fJ2EE%2fDocuments%2fWebsocket&FolderCTID=0x01200026E1CB394C7B6446AB3140DA6BE4EAFF\">here</a>. Take out the WebsocketClient.html in the webapp folder and change the IP and port at line 26. Deploy the app in tomcat after building it. Open the html file on browser and the chat application is up.\n</p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["websockets", "architecture"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.337Z"
}