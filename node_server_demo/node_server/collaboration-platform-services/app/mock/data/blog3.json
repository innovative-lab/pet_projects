{
  "blog_id": "blog_mock_3",
  "title": "Insights into Java 9 and Project Jigsaw - Part 1",
  "author": null,
  "content": "<strong>Java9</strong> is the next major Java release. According to the <a title=\"Java9 new schedule\" href=\"https://blogs.oracle.com/java/entry/java_9_news\">new schedule</a> published by Oracle, it is expected that Java9 feature completeness would be done by May 2016. After that it will go through rigorous tests and bug fixes, preparing it for general availability by March 2017. Till then, <span style=\"color: #000000;\">early access builds are <a title=\"Java9 early access build\" href=\"https://jdk9.java.net/jigsaw/\">available</a> for us to try out.</span>\r\n\r\nWe saw Java8 as a revolutionary release for Java, with changes appearing in the form of streams, lambdas and API changes; Java9 will be all about <strong>Jigsaw</strong>, extra utilities and some changes under the hood. In this blog, I will give you some basic insights into the most exicitng feature of Java9 -  <strong>Project Jigsaw</strong> . Eight years after its inception, <strong>Project Jigsaw</strong> - the modularization of the Java platform and introduction of a general module system - is finally getting released in Java9.\r\n<h3>Motivation for Project Jigsaw</h3>\r\n<ol>\r\n \t<li>Ever-growing size of Java Runtime</li>\r\n \t<li>Jar/Classpath Issue which arises due to deficiencies in Java's class loading mechanism</li>\r\n \t<li>Weak encapsulation across packages, where all public classes are visible to all other classes; there is no way to create functionality that is visible, for example, throughout a whole JAR but not outside of it.</li>\r\n \t<li>Security flaw that arises due to weak encapsulation across package boundaries, where security relevant functionality will be exposed to all code running in the same environment. This means that malicious code can access critical functionality that may allow it to <span style=\"color: #222222;\">deceive </span>security measures.</li>\r\n \t<li>Current start-up performance is poor since it takes some time to load Java runtime and JIT to compile all required classes. This is because class loading executes a linear scan of all JARs on the classpath.</li>\r\n</ol>\r\n<h3>Project Jigsaw Goals</h3>\r\n<ol>\r\n \t<li>Make the Java SE Platform, and the JDK, more easily scalable down to small computing devices</li>\r\n \t<li>Improve the security and maintainability of Java SE Platform Implementations in general, and the JDK in particular</li>\r\n \t<li>Enable improved application performance</li>\r\n \t<li>Make it easier for developers to construct and maintain libraries and large applications, for both the Java SE and EE Platforms</li>\r\n</ol>\r\nIn order to achieve these goals, Project Jigsaw has introduced a standard module system, which is then applied to Platform and JDK itself. In this blog we will focus on introducing the module system and explain some Jigsaw behavior using sample code snippets.\r\n<h3>Introducing Modules</h3>\r\nQuoting from the design overview <a title=\"State of Module System\" href=\"http://openjdk.java.net/projects/jigsaw/spec/sotms/#modules\">State of the Module System</a> by Oracle chief architect Mark Reinhold:\r\n\r\n<em>A module is a named, self-describing collection of code and data. Its code is organized as a set of packages containing types, i.e., Java classes and interfaces; its data includes resources and other kinds of static information.</em>\r\n<ul>\r\n \t<li>To control how its code refers to types in other modules, a module declares which other modules it <strong>requires</strong> in order to be compiled and run. <strong>To control how code in other modules refers to types in its packages, a module declares which of those packages it **exports</strong>.*This access-control mechanisms of Java and the JVM prevent code from accessing types in packages that are not exported by their defining modules.</li>\r\n</ul>\r\n<h3>Module Declaration</h3>\r\nThe simplest possible module declaration merely specifies the name of its module: <strong><em>                                module com.mindtree.greetings { }</em></strong>\r\n\r\n**Declaring public types in specific packages of modules to be available for use by other modules: ** Modules provide a list of all the packages of this particular module that are considered public API and thus usable by other modules. If a class is not in an exported package, no one outside of your module can access it – even if it is public.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetings-module.png\"><img class=\"alignnone size-full wp-image-5500\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetings-module.png\" alt=\"greetings module\" width=\"306\" height=\"58\" /></a>\r\n\r\n** Declaring a module depending on other module(s) at compile and run time:** Module specifying list of modules that it depends on, i.e., all public types that those modules export are accessible by the module in question.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetin-refers-world-module.png\"><img class=\"alignnone size-full wp-image-5505\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetin-refers-world-module.png\" alt=\"greetin refers world module\" width=\"276\" height=\"54\" /></a>\r\n\r\nThe source code for a module declaration is, by convention, placed in a file named <strong>module-info.java</strong> at the root of the module’s source-file hierarchy.\r\n\r\nUpto Java8, every public type on your classpath is accessible by every other type. With Jigsaw, accessibility of Java types evolves from 1. public 2. private 3. default 4. protected\r\n\r\nto\r\n<ol>\r\n \t<li>everyone who reads this module (exports)</li>\r\n \t<li>public to some modules that read this module (exports to, this will be covered in part two)</li>\r\n \t<li>public to every other class within the module itself</li>\r\n \t<li>private</li>\r\n \t<li>default</li>\r\n \t<li>protected</li>\r\n</ol>\r\n<h3>Examples</h3>\r\n<strong>Pre-requisite</strong>\r\n\r\n<strong>Java9</strong> - Take the latest nighty build available at <a href=\"https://jdk9.java.net/jigsaw/\">https://jdk9.java.net/jigsaw</a>/ and add it to your path.\r\n\r\n<strong>Usecases</strong> Let us take two use cases to understand the module system. 1. Create an independent module <em>com.mindtree.greetings</em> that prints <em>\"Hello\"</em> 2. Create two modules - one of which is dependent on the other. First module - <em>com.mindtree.world</em> simply prints a name, and second module - <em>com.mindtree.greetings</em> which depends on first module, takes whatever name is given by first module and prints <em>Hello </em>\r\n\r\n<strong>Usecase 1</strong> <em>Module *com.mindtree.greetings</em> will export com.mindtree.greetings package as shown in the below <em>module-info.java</em> file.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetings-module.png\"><img class=\"alignnone size-full wp-image-5500\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetings-module.png\" alt=\"greetings module\" width=\"306\" height=\"58\" /></a>\r\n\r\nModule <em>com.mindtree.greetings</em> will have below package structure -\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greeting-module-project-structure.png\"><img class=\"alignnone size-full wp-image-5499\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greeting-module-project-structure.png\" alt=\"greeting module project structure\" width=\"323\" height=\"155\" /></a>\r\n\r\nBy convention, modules are placed in a folder that shares the same name as the module.\r\n\r\nHello.java is the main class, which will just print <em>Hello</em> as shown below.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/hello-sample.png\"><img class=\"alignnone size-full wp-image-5501\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/hello-sample.png\" alt=\"hello sample\" width=\"379\" height=\"110\" /></a>\r\n\r\nLet us now compile the source code to a directory <em>mods</em> as shown in the below steps. 1. mkdir mods 2. javac -d mods $(find com.mindtree.greetings -name \"*.java\")\r\n\r\nNow, run the example with the below command.\r\n\r\n<em>java -modulepath mods -m com.mindtree.greetings/com.mindtree.greetings.Main</em>\r\n\r\nHere, <strong>-modulepath</strong> or <strong>-mp</strong> is the module path, its value is one or more directories that contain modules. The <strong>-m</strong> option specifies the main module, the value after the slash is the class name of the main class in the module. On running this module, it prints - <em>Hello</em>\r\n\r\n<strong>Usecase 2</strong> In the same project Java9-Jigsaw-sample, let us create another module - <em>com.mindtree.world</em>, which prints- <em>World</em> on being invoked by some other module. The project structure will look like below.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/module-2-project-structure.png\"><img class=\"alignnone size-full wp-image-5502\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/module-2-project-structure.png\" alt=\"module-2-project structure\" width=\"327\" height=\"322\" /></a>\r\n\r\nModule <em>com.mindtree.world</em> is an independent module. So, its module-info.java is as simple as below.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/world-module1.png\"><img class=\"alignnone size-full wp-image-5503\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/world-module1.png\" alt=\"world module\" width=\"269\" height=\"63\" /></a>\r\n\r\nWorld.java class prints- <em>World !</em> on invoking its getName() method as below.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/world-sample.png\"><img class=\"alignnone size-full wp-image-5506\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/world-sample.png\" alt=\"world sample\" width=\"304\" height=\"113\" /></a>\r\n\r\nNow while greeting, we want the name from <em>com.mindtree.world</em> module. So, module <em>com.mindtree.greetings</em> depends on module <em>com.mindtree.world</em>. So, let us modify module-info.java of module <em>com.mindtree.greetings</em>\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetin-refers-world-module.png\"><img class=\"alignnone size-full wp-image-5505\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/greetin-refers-world-module.png\" alt=\"greetin refers world module\" width=\"276\" height=\"54\" /></a>\r\n\r\nWe also have to refer World.java from Hello.java main class to print the name along with \"Hello\" as shown below.\r\n\r\n<a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/hello-sample-updated.png\"><img class=\"alignnone size-full wp-image-5507\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/03/hello-sample-updated.png\" alt=\"hello sample updated\" width=\"465\" height=\"131\" /></a>\r\n\r\nNow let us compile one module at a time. Since, module <em>com.mindtree.world</em> is an independent module and module <em>com.mindtree.greetings</em> is dependent on module <em>com.mindtree.world</em>, we should compile module <em>com.mindtree.world</em> first and then module <em>com.mindtree.greetings</em> as below. 1. javac -d mods $(find com.mindtree.world -name \"<em>.java\") 2. javac -modulepath mods -d mods $(find com.mindtree.greetings -name \"</em>.java\")\r\n\r\nOn successful compilation. let us run the module <em>com.mindtree.greetings</em> using the below command.\r\n\r\n<em>java -modulepath mods -m com.mindtree.greetings/com.mindtree.greetings.Main</em>\r\n\r\nThis will print - <em>Hello World !</em>\r\n\r\nThis blog covered the basics of module system proposed by Project Jigsaw and how to create, compile and run a simple Java application consisting of one/two modules. For more information on Project Jigsaw refer - <a href=\"http://openjdk.java.net/projects/jigsaw/\">http://openjdk.java.net/projects/jigsaw/</a> and to understand basics of modules, you can refer - <a href=\"http://openjdk.java.net/projects/jigsaw/spec/sotms/#modules\">http://openjdk.java.net/projects/jigsaw/spec/sotms/#modules</a>\r\n\r\nWatch this space for few more examples on Java9's more exiting feature - Project Jigsaw. Happy Learning !",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["java", "jigsaw"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.290Z"
}