{
  "blog_id": "blog_mock_18",
  "title": "Code coverage for Play-Java Applications using JaCoCo",
  "author": null,
  "content": "<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/06/java-icon.png\"><img class=\"alignnone size-full wp-image-4515\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/06/java-icon.png\" alt=\"java-icon\" width=\"105\" height=\"68\" /></a>    <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/10/play_image-e1412165537329.jpg\"><img class=\"alignnone size-full wp-image-5031\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/10/play_image-e1412165537329.jpg\" alt=\"play_image\" width=\"133\" height=\"50\" /></a>    <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-logo-1.jpg\"><img class=\"alignnone size-full wp-image-5102\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-logo-1.jpg\" alt=\"jacoco logo 1\" width=\"146\" height=\"68\" /></a>    <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jenkins-logo-21.jpg\"><img class=\"alignnone size-full wp-image-5101\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jenkins-logo-21.jpg\" alt=\"jenkins logo 2\" width=\"183\" height=\"68\" /></a> I have been using Play framework for quite some time to build Scala-based web applications. But recently I have started using Play framework to create a Java-based application. So, the next step after writing some code and unit test-cases was to check the code coverage, code quality and then to perform continuous integration of the project using Jenkins. I have spent some hours scratching my head to decide on which code coverage tool to use for a Play-Java application, how to configure it in a Play-Java project and finally the trickiest part which consumed the maximum time but I finally figured it out, which was – how to configure code coverage tool for your project in Jenkins. Through this blog, I will share my learning experience and at the same time will address all the above questions so that you do not have to re-work and spend efforts on the same. So, in this blog I would be focusing on the following areas: 1. What is JaCoCo? 2. How to integrate JaCoCo with a Play Application? 3. How to check code coverage of Play Application in your local build? 4. How to configure the project settings in Jenkins to produce code coverage report using JaCoCo plugin?   <strong>Introduction to JaCoCo</strong> JaCoCo (Java Code Coverage) is an open-source code coverage library for Java, distributed under the Eclipse Public License. It is currently the only byte code coverage tool that works with Java 8.   <strong>Pre-requisites</strong> 1. Sbt (Simple Build Tool) 0.13.5 or above 2. Play 2.3.x 3. jacoco4sbt 2.1.6 plugin used 4. A Java Web application written using Play Framework with some unit test cases   <strong>Integrate JaCoCo with Play-Java Application</strong> If you have not created a Play-Java application and still want to see how to configure JaCoCo, you can create a new Play-Java Application using <strong>\"activator new <Project-Name>\"</strong>. In both the cases, follow the below steps. 1. Add the following lines in <strong>\"project/plugins.sbt\"</strong> to add JaCoCo plugin in the project. <strong><em>                addSbtPlugin(\"de.johoop\" % \"jacoco4sbt\" % \"2.1.6\")</em></strong> 2. Add <strong>“qa.jacoco.sbt file”</strong> in the root directory of the project. Default qa.jacoco.sbt file has the following configurations. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/qa.jacoco.sbt_.sample.png\"><img class=\"aligncenter  wp-image-5083\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/qa.jacoco.sbt_.sample.png\" alt=\"qa.jacoco.sbt.sample\" width=\"814\" height=\"218\" /></a>   <strong>Check code-coverage of your Play-Java Application locally</strong> Execute <strong>\"activator jacoco:cover\"</strong> in the command prompt from the root directory of the project to generate code coverage report locally. The output in command prompt will look similar to the below snapshot. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-coverage-report-locally.png\"><img class=\"aligncenter size-full wp-image-5085\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-coverage-report-locally.png\" alt=\"jacoco-coverage-report-locally\" width=\"827\" height=\"197\" /></a> This command creates a jacoco folder under target directory containing jacoco.exec, jacoco.xml, some html and class files as shown below, which can be further used in jenkins build process, to see the code coverage status locally, etc. To view package-wise code coverage, open <strong>index.html</strong> in the web browser. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-target-structure.png\"><img class=\"aligncenter  wp-image-5086\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-target-structure.png\" alt=\"jacoco-target-structure\" width=\"254\" height=\"188\" /></a>   <strong>Configure Play-Java project in Jenkins to produce code-coverage using JaCoCo Plugin</strong> 1. In Jenkins home page, select <strong>\"Manage Jenkins\"</strong>, then select <strong>\"Manage Plugins\"</strong>. Check for <strong>\"JaCoCo plugin\"</strong> and then install it. 2. Create a new Freestyle project in Jenkins. Give a suitable name to your project. 3. Add** “Source Code Management”** related configurations like SVN URL to the project settings. 4. Select a suitable <strong>\"Check-out Strategy\"</strong>. Preferably, select <strong>“Always checkout a fresh copy”</strong> option. 5. Add a <strong>build step</strong> to trigger jacoco:cover command as shown below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/build-step.png\"><img class=\"aligncenter  wp-image-5087\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/build-step.png\" alt=\"build step\" width=\"804\" height=\"217\" /></a> 6. Add a <strong>post-build action</strong> for JaCoCo. The configurations for JaCoCo could be similar to the snapshot below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-incorrect-conf.png\"><img class=\"aligncenter  wp-image-5088\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-incorrect-conf.png\" alt=\"jacoco-incorrect-conf\" width=\"841\" height=\"208\" /></a> Oops!! This gives an exception. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-error.png\"><img class=\"aligncenter  wp-image-5089\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-error.png\" alt=\"jacoco-error\" width=\"707\" height=\"350\" /></a> What to do?? So, I made two changed in the configurations – <strong>“Path to class directories”</strong> and <strong>“Inclusions”</strong> as shown below and the build was successful. Yippie!! <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-jenkins-config.png\"><img class=\"aligncenter  wp-image-5090\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-jenkins-config.png\" alt=\"jacoco-jenkins-config\" width=\"785\" height=\"260\" /></a> Also specify <strong>“Exclusions”</strong> carefully, else either the build will fail with some exceptions or the JaCoCo coverage report will have errors. You can refer to the above sample exclusions list. 7. Save the configurations and build the project. Once project builds successfully, the final output will look similar to the below output. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/build-success-output.png\"><img class=\"aligncenter  wp-image-5092\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/build-success-output.png\" alt=\"build success output\" width=\"977\" height=\"356\" /></a> 8. And finally the JaCoCo Code Coverage Report will look something like the below report. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-report-jenkins.png\"><img class=\"aligncenter  wp-image-5093\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2015/02/jacoco-report-jenkins.png\" alt=\"jacoco-report-jenkins\" width=\"902\" height=\"323\" /></a>     Configuring JaCoCo with your Play Application seems quite interesting, isn’t it? Why don’t you give it a try? In case you need some assistance or further information, please contact <a href=\"https://vista-mindtree.cloudapp.net/coe_open/contact-us/\">OpenPlatform COE</a> or you can also post your comments below.    </p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["jacoco", "quality", "play"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.337Z"
}