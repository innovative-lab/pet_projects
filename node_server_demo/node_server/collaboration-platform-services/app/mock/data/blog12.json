{
  "blog_id": "blog_mock_12",
  "title": "Boot up your Batch Jobs using Spring Boot",
  "author": null,
  "content": "<p>Sometimes enterprise applications require bulk processing of large volume of information without user interactions. These operations could be some periodic calculations, or integration and processing of information from multiple systems in a transactional manner, etc. Spring Batch is a framework which enables us to develop robust batch applications required by enterprise systems to process large volumes of data. First let us look into some Spring Batch concepts, before jumping on writing batch jobs using Spring Boot. <span style=\"font-size: 14pt;\"><strong>Spring Batch Concepts</strong></span> <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/spring-batch-model.png\"><img class=\"alignnone size-full wp-image-5364\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/spring-batch-model.png\" alt=\"spring-batch-model\" width=\"738\" height=\"294\" /></a> <strong>1&#46; Job - </strong>A Job is an entity that encapsulates an entire batch process. It can be wired together using XML configuration or Java based configuration. It consists of one or more steps. A job configuration contains -</p>\n\n<ol style=\"list-style-type: lower-alpha;\">\n  <li>\n     Name of Job\n  </li>\n  <li>\n    Definition and ordering of Steps\n  </li>\n  <li>\n    Is job restartable?\n  </li>\n</ol>\n\n<p><strong>2&#46; Step - </strong>A Step is a domain object that encapsulates an independent, sequential phase of a batch job. It contains all of the information necessary to define and control the actual batch processing. <strong>3&#46; Item - </strong>Individual piece of data that is to be processed. <strong>4&#46; Chunk - </strong>Chunk is the processing style used by Spring Batch: read and process the item and then aggregate until reach a number of items, called “<em>chunk</em>” that will be finally written. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/chunk-oriented-processing.png\"><img class=\"aligncenter wp-image-5365 size-full\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/chunk-oriented-processing.png\" alt=\"chunk-oriented-processing\" width=\"594\" height=\"327\" /></a> <strong>5&#46; JobParameters - </strong>JobParameters is a set of parameters used to start a batch job. It can be used for identification of each JobInstance. <strong>6&#46; JobLauncher - </strong>Job Launcher is the entry point to launch Spring Batch jobs with a given set of JobParameters. <strong>7&#46; Job Repository - </strong>JobRepository maintains all metadata related to job executions and provides CRUD operations for JobLauncher, Job, and Step implementations. <strong>8&#46; ItemReader - </strong>ItemReader is an abstraction that represents the retrieval of input for a Step, one item at a time. Generally, inputs could be provided from flat files, XML or any database resource. ItemReader is a base interface for generic input operations: <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemReader.png\"><img class=\"alignnone size-full wp-image-5366\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemReader.png\" alt=\"ItemReader\" width=\"530\" height=\"83\" /></a> Hers, read() method returns one item at a time or null when no more items are left. <strong>9&#46; ItemWriter - </strong>ItemWriter is inverse of ItemReader. It is an abstraction that represents the output of a Step, one batch or chunk of items at a time. These are usually inserts, updates or sends in case of databases or queues. ItemWriter is the base interface for generic output operations : <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemWriter.png\"><img class=\"alignnone size-full wp-image-5367\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemWriter.png\" alt=\"ItemWriter\" width=\"421\" height=\"82\" /></a> Here, write() method will attempt to write out the list of items passed in as long as it is open. <strong>10&#46; ItemProcessor - </strong>ItemProcessor is an abstraction that represents the business processing of an item. It allows transformation of the item read or perform any business logic before the item is written. While processing the item, if it is determined that the item is not valid, it returns null indicating that the item should not be written out. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemProcessor.png\"><img class=\"alignnone size-full wp-image-5368\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/ItemProcessor.png\" alt=\"ItemProcessor\" width=\"301\" height=\"67\" /></a>     <span style=\"font-size: 14pt;\"><strong>Spring Batch – In Spring Boot way</strong></span> <span style=\"font-size: 12pt;\"><strong>Pre-requisites –</strong></span> \n1.  Java 1.8+\n2.  Maven 3.0+\n3.  Preferable IDE\n4.  MySQL</p>\n\n<p><span style=\"font-size: 12pt;\"><strong>Steps –</strong></span> <strong>1&#46; Project Creation – </strong>You can create a maven project manually and add required dependencies in pom.xml or you can use Spring Initializer <a href=\"http://start.spring.io/\">http://start.spring.io</a>, specify required dependencies, download the generated project and then import it in your preferred IDE. <strong>2&#46; Project Dependencies – </strong>Minimal dependencies required to write batch jobs are – <em>spring-boot-starter-batch</em> and preferred database dependency. When you create your project using Spring Initializer, it has “<em>spring-boot-maven-plugin</em>”. This Spring Boot Maven plugin helps – \n*   Collect all the jars in the classpath and create a single runnable uber jar\n*   Provides built-in dependency that sets the version number to match Spring Boot dependencies.</p>\n\n<p><strong>3&#46; Database Configuration – </strong>You can provide datasource configuration in application.properties. Check this blog - <a href=\"https://vista-mindtree.cloudapp.net/coe_open/blog/spring-boot-develop-bootiful-restful-web-services-in-15-minutes/\">Spring Boot – Develop BOOTiful RESTful Web Services in 15 minutes</a> for MYSQL related configuration. <strong>4&#46; Create model class – </strong>This class will represent the input and output data formats. <strong>5&#46; Write your Processor implementation – </strong>Implement ItemProcessor interface to write your custom processing/transformation logic for the input data before it is actually written. Your custom implementation of ItemProcessor can be as simple as setting the value of an attribute as below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-processor-implementation.png\"><img class=\"alignnone size-full wp-image-5383\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-processor-implementation.png\" alt=\"item processor implementation\" width=\"711\" height=\"220\" /></a> **6&#46; Put together a batch job – **Write a configuration class that provides details on the batch jobs.</p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    <em><strong><em>Make your configuration class ready</em> </strong></em>to process batch jobs. For this, annotate your class with <em>@Configuration</em> - enables class will be processed by the Spring container to generate bean definitions and <em>@EnableBatchProcessing</em> - provides a base configuration for building batch jobs, as below.<em> </em>\n  </li>\n</ul>\n\n<p><em>           <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/enable-batch-configuration.png\"><img class=\"alignnone wp-image-5369 \" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/enable-batch-configuration.png\" alt=\"enable batch configuration\" width=\"293\" height=\"51\" /></a></em></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    <em><strong><em>Additional Configuration -</em></strong> </em>StepBuilderFactory and JobBuilderFactory beans should be available to configure steps and jobs respectively. Using JobBuilderFactory class, Spring Batch will create a job builder and will initialize its job repository. Similarly using StepBuilderFactory class, Spring Batch will create a step builder and will initialize its job repository and transaction manager. StepBuilder is an entry point for building all kinds of steps.<em> </em>\n  </li>\n  <li>\n    <em><strong><em>Write custom Reader implementation -</em></strong></em> Inputs could be provided from flat files, XML or any database resource. Below example shows reading input from database.<em> </em>\n  </li>\n</ul>\n\n<p><em>           <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-reader-implementation.png\"><img class=\"alignnone size-full wp-image-5371\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-reader-implementation.png\" alt=\"item reader implementation\" width=\"578\" height=\"201\" /></a></em> Here, you can provide the query to be used to read data from database. The mapping of each row to the actual object happens by writing your custom RowMapper implementation. Below is an example which maps each row to a Customer object. <img class=\"alignnone size-full wp-image-5370\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/Row-mapper-implementation.png\" alt=\"Row mapper implementation\" width=\"766\" height=\"268\" /></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    <em><strong><em>Write custom Writer implementation –</em></strong> </em>Below example shows how processed data could be written to a datasource.<em> </em>\n  </li>\n</ul>\n\n<p><em>          <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-writer-implementation.png\"><img class=\"alignnone size-full wp-image-5372\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/item-writer-implementation.png\" alt=\"item writer implementation\" width=\"749\" height=\"127\" /></a></em></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    <strong><em>Configure Step –</em> </strong>Steps will specify the sequence of execution of the entire phase of the job. Below is a sample step where each record is read, processed and written one by one. The size specified in chunk() method determines the number items being written at once.\n  </li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/step-configuration.png\"><img class=\"alignnone  wp-image-5373\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/step-configuration.png\" alt=\"step configuration\" width=\"771\" height=\"94\" /></a></p>\n\n<ul style=\"list-style-type: disc;\">\n  <li>\n    <strong><em>Configure Job –</em></strong> While configuring a job, we have to specify name of the job, job parameters, one or more steps to be executed as part of this job, etc., as shown below.\n  </li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/configure-job.png\"><img class=\"alignnone size-full wp-image-5374\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/configure-job.png\" alt=\"configure job\" width=\"813\" height=\"112\" /></a> <strong>7&#46; </strong><strong style=\"font-style: italic;\">Schedule it if required –</strong> If you want to schedule your batch jobs, you can write a job runner class, annotate it with <em>@EnableScheduling</em> and provide a job scheduler with either cron or some sort of time delay, as shown below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/job-runner.png\"><img class=\"alignnone size-full wp-image-5375\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/job-runner.png\" alt=\"job runner\" width=\"710\" height=\"220\" /></a> This above job will run every hour. **8&#46; Configure entry point of application – **Add all your job runners in the main method in your launcher class as shown below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/main-class.png\"><img class=\"alignnone size-full wp-image-5380\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/02/main-class.png\" alt=\"main class\" width=\"822\" height=\"125\" /></a>   That’s it!! Your batch jobs are now ready. You can go ahead and build your application and run the executable jar. I hope this blog was helpful for you to understand the basic concepts of Spring Batch, how to write your batch job using Spring Boot in least possible timeframe and how to schedule your jobs to run without interruption. I would be glad to see your comments and queries in the comments section. Happy Learning!!</p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["microservices", "spring", "batch"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.321Z"
}