{
  "blog_id": "blog_mock_11",
  "title": "Spring Boot - Develop BOOTiful RESTful Web Services in 15 minutes",
  "author": null,
  "content": "<p>In my previous blog – <a href=\"https://vista-mindtree.cloudapp.net/coe_open/blog/basics-of-spring-boot/\">Basics of Spring Boot</a>, I had emphasized on why you should try out Spring Boot, how it has simplified Spring framework and has given a new view of Spring platform to the developers. In this blog, I will guide you through the creation of RESTful Web Services using Spring Boot within minutes.   <span style=\"font-size: 18pt; color: #008080;\"><strong>Usecase</strong></span> We will consider a simple usecase to create below two web services. 1. Add a new customer to the system 2. Retrieve the newly added customer by unique mobile number   <span style=\"font-size: 18pt; color: #008080;\"><strong>Pre-requisites</strong></span> 1. JDK 1.6+ 2. Maven 3.x 2. Eclipse or IntelliJ IDE 3. MySQL database   <span style=\"font-size: 18pt; color: #008080;\"><strong>Steps</strong></span> <strong><span style=\"font-size: 12pt; color: #008080;\">1. Project creation</span> - **You can create a basic <em>Maven</em> or <em>Gradle</em> project using **Spring Initializer</strong> - <a href=\"http://start.spring.io/\">http://start.spring.io</a> by specifying required Project metadata and dependencies, as shown in the below diagram. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/spring-initializer-rest.png\"><img class=\"aligncenter size-full wp-image-5347\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/spring-initializer-rest.png\" alt=\"spring initializer rest\" width=\"873\" height=\"392\" /></a> Once you specify the dependencies as shown in the above image, spring initializer creates a project with those dependencies in pom.xml. On clicking <strong>Generate Project</strong>, a zip file with the base project structure gets downloaded. Just unzip it and import it in your preferable IDE. <strong><span style=\"font-size: 12pt; color: #008080;\">2. Project Structure</span> - **On creating basic Maven project using Spring Initializer (as above), below will be the default project structure. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/project-structure.png\"><img class=\"aligncenter wp-image-5348 size-full\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/project-structure.png\" alt=\"project structure\" width=\"234\" height=\"273\" /></a> <span style=\"font-size: 12pt; color: #008080;\"><strong>3. Project Dependencies -</strong></span> You can also add new dependencies to your <em>pom.xml</em> apart from what gets included by default using Spring Initializer. <span style=\"color: #008080; font-size: 12pt;\"><strong>4. Database Configuration -</strong></span> You should specify database dependency in <em>pom.xml</em>. Then other datasource configurations are to be specified in <em>application.properties</em>. Below diagram is an example for datasource configurations for MySQL DB. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/datasource-config1.png\"><img class=\"aligncenter wp-image-5357 size-full\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/datasource-config1.png\" alt=\"datasource config\" width=\"464\" height=\"156\" /></a> <span style=\"font-size: 12pt; color: #008080;\"><strong>5. Model -</strong></span> Create a package **domain</strong> under base package and then create a domain class with relevant attributes, annotate the class with <em>@Entity</em> and specify which table to map to using <em>@Table</em>. Also, specify the primary key using <em>@Id</em> and key generation type using <em>@GeneratedValue</em>. In order to generate getters, setters, hashCode, equals and toString automatically, you can add lombok dependency in pom.xml as below. <em>                        <span style=\"color: #0000ff;\"> <span style=\"color: #3366ff;\"><dependency></span></span></em> <span style=\"color: #3366ff;\"><em>                                    <groupId>org.projectlombok</groupId></em></span> <span style=\"color: #3366ff;\"><em>                                    <artifactId>lombok</artifactId></em></span> <span style=\"color: #3366ff;\"><em>                                    <version>1.16.6</version></em></span> <span style=\"color: #3366ff;\"><em>                        </dependency></em></span> Your class looks as simple and elegant as below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/class-lombok.png\"><img class=\"alignnone wp-image-5350 size-full\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/class-lombok.png\" alt=\"class-lombok\" width=\"367\" height=\"277\" /></a> <span style=\"font-size: 12pt; color: #008080;\"><strong>6. Repository –</strong></span> Spring Data makes it easier to build Spring-powered applications that uses data access technologies. You can add Spring Data JPA dependency in your pom.xml as below. <em>                        <span style=\"color: #3366ff;\"><dependency></span></em> <span style=\"color: #3366ff;\"><em>                                    <groupId>org.springframework.boot</groupId></em></span> <span style=\"color: #3366ff;\"><em>                                    <artifactId>spring-boot-starter-data-jpa</artifactId></em></span> <span style=\"color: #3366ff;\"><em>                        </dependency></em></span> Now you just have to extend JpaRepository interface to create a custom repository for a domain class. You must specify the domain class and the id type of the domain class as type arguments to JpaRepository as shown below. <span style=\"color: #666699;\"><em>                       <span style=\"color: #3366ff;\"> public interface CustomerRepository extends JpaRepository&lt;Customer, Long></span></em></span> JpaRepository interface also comes with a bunch of predefined methods as below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/jpa-repository.png\"><img class=\"aligncenter wp-image-5351 size-full\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/jpa-repository.png\" alt=\"jpa repository\" width=\"287\" height=\"186\" /></a> If you want to query using a particular field, you can do so using <strong><em>find</em></strong> syntax. Ex: If you want to enquire about a customer based on a given mobile number, you can say <em>                       <span style=\"color: #3366ff;\">Customer findByMobileNumber (String mobileNumber);</span></em> Spring Data is smart enough to fetch you the required Customer from database. It helps in drastically reducing the number of lines of code and effort in writing same repeated code for interacting with database. <span style=\"color: #008080; font-size: 12pt;\"><strong>7. Service -</strong></span> Service Layer will interact with repository layer to perform database-related operations. Annotate your service class with <em>@Service</em> and provide a unique name to it. Then add required repository you want to interact with and autowire it in your service class. Ex: If you want to save a Customer domain object in the database, you can autowire <em>CustomerRepository</em> (as created above) and call <span style=\"color: #3366ff;\"><em>customerRepository.save(customer)</em> </span>method. This will save the customer object in database. This is so simple, isn't it? Similarly, in order to fetch a customer based on given mobile number, call the above created method of CustomerRepository - <span style=\"color: #3366ff;\"><em>customerRepository.findByMobileNumber(mobileNumber) </em></span>in your service method and you are done. <span style=\"font-size: 12pt; color: #008080;\"><strong>8. Controller -</strong> </span>This is the final step where we specify request mappings for the exposed REST endpoints in the controllers and call relevant service method to perform business logic. Annotate your controller with <em>@RestController</em> and provide a base request mapping using <em>@RequestMapping</em>. Ex: <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/controller-request-mapping.png\"><img class=\"alignnone size-full wp-image-5352\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/controller-request-mapping.png\" alt=\"controller-request mapping\" width=\"266\" height=\"32\" /></a> Autowire required service layer, write request handler methods which interacts with service layer to perform the required operation. Then, you can annotate each method with <em>@RequestMapping</em> and provide HTTP method and specific URL for that end-point as below. <span style=\"color: #3366ff;\"><em>                   @RequestMapping(value = \"/internal\", method = RequestMethod.GET)</em></span> For POST and PUT requests, you might have to write a Validator to perform validation checks of the request body. Write the validator and autowire it in the controller. Then add the validator in the data binder as below. <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/validator.png\"><img class=\"alignnone size-full wp-image-5353\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/validator.png\" alt=\"validator\" width=\"418\" height=\"116\" /></a>   Now, you are ready to build and deploy your application. Run <em>mvn clean install</em> to build your project. Once the projects gets build successfully, run <em>java –jar target\\&lt;jar-name.jar></em> and your APIs are up and running. So, did it take more than 15-20 minutes to get your APIs running? Isn't Spring Boot a saviour for developers? I would encourage you to try it out, you will love it.   Watch out this space for few more interesting blogs on Spring Boot. Happy Learning ! <a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2016/01/spring-initializer-rest.png\"> </a></p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["microservices", "spring"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.321Z"
}