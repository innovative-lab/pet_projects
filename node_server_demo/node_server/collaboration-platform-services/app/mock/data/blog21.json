{
  "blog_id": "blog_mock_21",
  "title": "Write simple Java + REST + JPA in 5 minutes with Play",
  "author": null,
  "content": "<p>The purpose of this blog is to enable reader write a simple REST service in Java using Play framework in quick time. Play is open source web application framework, follows MVC architectural pattern, runs on JVM but does not obey Java EE specifications. It supports rapid application development and zero environment setup. Further, writing REST services with Play is very simple and easy. To let reader experience the same a simple employee service usecase has been considered and the steps to implement it are demonstrated below.</p>\n\n<h2>Simple usecase</h2>\n\n<ul>\n<li>Client requests Employee information by sending an HTTP GET request with employee id.</li>\n<li>Client receives the information in JSON format.   </li>\n</ul>\n\n<h2>Prerequisites</h2>\n\n<ul>\n<li>JDK 6+</li>\n<li>Eclipse IDE</li>\n<li>Access to a database server like MySQL which has database named <strong>employeedb</strong> and a table **employee **with employee records which our application will read.   </li>\n</ul>\n\n<h2>Steps</h2>\n\n<h4>Get Play</h4>\n\n<ul>\n<li>Download typesafe activator for Play framework from <a href=\"http://downloads.typesafe.com/typesafe-activator/1.2.10/typesafe-activator-1.2.10.zip\">http://downloads.typesafe.com/typesafe-activator/1.2.10/typesafe-activator-1.2.10.zip</a>.   </li>\n</ul>\n\n<h4>Project creation</h4>\n\n<ul>\n<li>Extract the zip. From command prompt enter into extracted directory <strong><em>typesafe-activator-1.2.10/activator-1.2.10</em></strong> and create new project using below command. <strong><em>EmployeeMgmt</em></strong> will be the name of new project.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n               <span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">activator new EmployeeMgmt</span>\n</p>\n\n<ul>\n<li>Choose option 3 to create project using play-java template</li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/11.png\"><img class=\"alignnone size-full wp-image-4988\" style=\"margin-left: 46px;\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/11.png\" alt=\"1\" width=\"799\" height=\"313\" /></a><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/11.png\"> </a> \n*   Run <span style=\"font-size: 12pt; font-family: 'courier new', courier; color: #0000ff;\">activator</span> from project root directory to resolve default dependencies and start activator console.\n*   In the console run <span style=\"color: #0000ff; font-family: 'courier new', courier; font-size: 12pt;\">eclipse</span> command to eclipsify the project which makes the project importable into eclipse.\n*   Import the project into eclipse. The project comes with a template which includes mostly all necessary folders, packages, configuration files etc.</p>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/21.png\"><img class=\"alignnone size-full wp-image-4992\" style=\"margin-left: 46px;\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/21.png\" alt=\"2\" width=\"273\" height=\"439\" /></a><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/21.png\"> </a>  </p>\n\n<h4>Project dependencies</h4>\n\n<ul>\n<li>Add dependencies for javaJpa plugin, MySQL driver, Hibernate libraries in <strong><em>build.sbt</em></strong> present in project root directory.</li>\n</ul>\n\n<p><span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">    libraryDependencies ++= Seq(</span></p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">    javaJpa,</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">    \"mysql\" % \"mysql-connector-java\" % \"5.1.18\",</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">    \"org.hibernate\" % \"hibernate-entitymanager\" % \"3.6.9.Final\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; color: #0000ff; font-size: 12pt;\">    )</span>\n</p>\n\n<p><li style=\"text-align: left;\">\n  From command prompt start activator console again and eclipsify to download these dependencies.\n</li>  </p>\n\n<h4>Database and JPA configurations</h4>\n\n<ul>\n<li>Define database configurations in <strong><em>application.conf</em></strong> under conf directory.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n  <span style=\"color: #0000ff; font-size: 12pt; font-family: 'courier new', courier;\">    db.default.driver=com.mysql.jdbc.Driver</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"color: #0000ff; font-size: 12pt; font-family: 'courier new', courier;\">    db.default.url=\"jdbc:mysql://localhost:3306/employeedb\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"color: #0000ff; font-size: 12pt; font-family: 'courier new', courier;\">    db.default.user=\"root\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"color: #0000ff; font-size: 12pt; font-family: 'courier new', courier;\">    db.default.password=\"Welcome123\"</span>\n</p>\n\n<ul>\n<li>Expose datasource through JNDI by uncommenting below configuration in application.conf.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    db.default.jndiName=DefaultDS</span>\n</p>\n\n<ul>\n<li>Create proper <strong><em>persistence.xml</em></strong> file under conf/META-INF to define JPA configurations as shown below.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence               http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"</span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    version=\"2.0\"></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <persistence-unit name=\"defaultPersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\"></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <provider>org.hibernate.ejb.HibernatePersistence</provider></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <non-jta-data-source>DefaultDS</non-jta-data-source></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <properties></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQL5Dialect\" /></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    <property name=\"hibernate.show_sql\" value=\"false\"/></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    </properties></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    </persistence-unit></span>\n</p>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    </persistence></span>\n</p>\n\n<ul>\n<li>Mention persistence unit used by the JPA in application.conf.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    jpa.default=defaultPersistenceUnit</span>\n</p>\n\n<p> </p>\n\n<h4>Model</h4>\n\n<ul>\n<li>Create a package model under app source folder if not present. Under this package create a model named Employee with relevant fields.</li>\n<li>Make the class JPA entity by annotating the class with @Entity and id field with @Id.</li>\n<li>Define a static model method which will fetch the Employee from database using JPA’s entity manager.</li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/3.png\"><img class=\"alignnone size-full wp-image-4993\" style=\"margin-left: 46px;\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/3.png\" alt=\"3\" width=\"495\" height=\"311\" /></a><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/3.png\"> </a>  </p>\n\n<h4>Controller</h4>\n\n<ul>\n<li>Define an action method in <strong><em>Application</em></strong> controller present under app/controllers for employee service which takes id as argument. The method calls Employee model's method to fetch Employee, converts it into JSON format and returns it with HTTP 200 response.</li>\n<li>Annotate the action method with @Transactional annotation.</li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/4.png\"><img class=\"alignnone size-full wp-image-4994\" style=\"margin-left: 46px;\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/4.png\" alt=\"4\" width=\"489\" height=\"110\" /></a><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/4.png\"> </a>  </p>\n\n<h4>Application routing</h4>\n\n<ul>\n<li>Define an application route for employee service in <strong><em>routes</em></strong> file under conf directory. This definition is used by Play to map incoming HTTP request to specific action method and bind path parameters to arguments of action method.</li>\n</ul>\n\n<p style=\"text-align: left;\">\n  <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">    GET     /employee/:id        controllers.Application.employeeService(id: Long)</span>\n</p>\n\n<p> </p>\n\n<h4>Starting application</h4>\n\n<ul>\n<li> From activator console in command prompt and run <span style=\"font-family: 'courier new', courier; font-size: 12pt; color: #0000ff;\">run 9001</span> to start the application. 9001 is the port number on which application will run. Port number is optional (default is 9000).</li>\n<li>From web browser access the service by entering proper URL and valid id for employee. Employee information will be returned in JSON format.</li>\n</ul>\n\n<p><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/5.png\"><img class=\"alignnone size-full wp-image-4995\" style=\"margin-left: 46px;\" src=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/5.png\" alt=\"5\" width=\"477\" height=\"230\" /></a><a href=\"https://vista-mindtree.cloudapp.net/coe_open/wp-content/uploads/2014/09/5.png\"> </a> \n*   In case of any error, the place of occurrence is showed on the browser. Once bug is fixed in code or configurations, refreshing the page will reflect the changes. The application doesn’t need to be restarted. Done. A simple REST service is up and running. Creation of new project, setting up the dependencies, defining DB and JPA configurations, writing model and controller, configuring routes and then building-deploying-starting application, all of these have been done within few minutes. Now any REST service for different or more complex usecases can be written with Play by following above steps. The above development can be compared with the development done to implement the same service in Java+Spring+JPA+Tomcat. The environment setup and application building are made easier and faster with Play. Further the same setup can be used in production environment also.</p>\n",
  "status": "PUBLISHED",
  "viewed_by": [],
  "tags": ["play","java", "rest", "jpa"],
  "liked_by": [],
  "comments": [],
  "dateOfPublishing": "2016-06-17T16:25:24.353Z"
}